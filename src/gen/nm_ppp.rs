// This code was autogenerated with `dbus-codegen-rust -m None`, see https://github.com/diwic/dbus-rs
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopNetworkManagerPPP {
    fn need_secrets(&self) -> Result<(String, String), dbus::Error>;
    fn set_ip4_config(
        &self,
        config: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<(), dbus::Error>;
    fn set_ip6_config(
        &self,
        config: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<(), dbus::Error>;
    fn set_state(&self, state: u32) -> Result<(), dbus::Error>;
    fn set_ifindex(&self, ifindex: i32) -> Result<(), dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::SyncConnection>> OrgFreedesktopNetworkManagerPPP
    for blocking::Proxy<'a, C>
{
    fn need_secrets(&self) -> Result<(String, String), dbus::Error> {
        self.method_call("org.freedesktop.NetworkManager.PPP", "NeedSecrets", ())
    }

    fn set_ip4_config(
        &self,
        config: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.PPP",
            "SetIp4Config",
            (config,),
        )
    }

    fn set_ip6_config(
        &self,
        config: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.PPP",
            "SetIp6Config",
            (config,),
        )
    }

    fn set_state(&self, state: u32) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.NetworkManager.PPP", "SetState", (state,))
    }

    fn set_ifindex(&self, ifindex: i32) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.PPP",
            "SetIfindex",
            (ifindex,),
        )
    }
}
