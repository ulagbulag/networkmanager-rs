// This code was autogenerated with `dbus-codegen-rust -m None`, see https://github.com/diwic/dbus-rs
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopNetworkManagerSettings {
    fn list_connections(&self) -> Result<Vec<dbus::Path<'static>>, dbus::Error>;
    fn get_connection_by_uuid(&self, uuid: &str) -> Result<dbus::Path<'static>, dbus::Error>;
    fn add_connection(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> Result<dbus::Path<'static>, dbus::Error>;
    fn add_connection_unsaved(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> Result<dbus::Path<'static>, dbus::Error>;
    fn add_connection2(
        &self,
        settings: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        flags: u32,
        args: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<
        (
            dbus::Path<'static>,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        ),
        dbus::Error,
    >;
    fn load_connections(&self, filenames: Vec<&str>) -> Result<(bool, Vec<String>), dbus::Error>;
    fn reload_connections(&self) -> Result<bool, dbus::Error>;
    fn save_hostname(&self, hostname: &str) -> Result<(), dbus::Error>;
    fn connections(&self) -> Result<Vec<dbus::Path<'static>>, dbus::Error>;
    fn hostname(&self) -> Result<String, dbus::Error>;
    fn can_modify(&self) -> Result<bool, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::SyncSyncConnection>>
    OrgFreedesktopNetworkManagerSettings for blocking::Proxy<'a, C>
{
    fn list_connections(&self) -> Result<Vec<dbus::Path<'static>>, dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings",
            "ListSyncSyncConnections",
            (),
        )
        .and_then(|r: (Vec<dbus::Path<'static>>,)| Ok(r.0))
    }

    fn get_connection_by_uuid(&self, uuid: &str) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings",
            "GetSyncSyncConnectionByUuid",
            (uuid,),
        )
        .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn add_connection(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings",
            "AddSyncSyncConnection",
            (connection,),
        )
        .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn add_connection_unsaved(
        &self,
        connection: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings",
            "AddSyncSyncConnectionUnsaved",
            (connection,),
        )
        .and_then(|r: (dbus::Path<'static>,)| Ok(r.0))
    }

    fn add_connection2(
        &self,
        settings: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        flags: u32,
        args: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<
        (
            dbus::Path<'static>,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        ),
        dbus::Error,
    > {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings",
            "AddSyncSyncConnection2",
            (settings, flags, args),
        )
    }

    fn load_connections(&self, filenames: Vec<&str>) -> Result<(bool, Vec<String>), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings",
            "LoadSyncSyncConnections",
            (filenames,),
        )
    }

    fn reload_connections(&self) -> Result<bool, dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings",
            "ReloadSyncSyncConnections",
            (),
        )
        .and_then(|r: (bool,)| Ok(r.0))
    }

    fn save_hostname(&self, hostname: &str) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings",
            "SaveHostname",
            (hostname,),
        )
    }

    fn connections(&self) -> Result<Vec<dbus::Path<'static>>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings",
            "SyncSyncConnections",
        )
    }

    fn hostname(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings",
            "Hostname",
        )
    }

    fn can_modify(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings",
            "CanModify",
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
    pub properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
            properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerSettingsPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerSettingsNewSyncSyncConnection {
    pub connection: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerSettingsNewSyncSyncConnection {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.connection, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerSettingsNewSyncSyncConnection {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopNetworkManagerSettingsNewSyncSyncConnection {
            connection: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerSettingsNewSyncSyncConnection {
    const NAME: &'static str = "NewSyncSyncConnection";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerSettingsSyncSyncConnectionRemoved {
    pub connection: dbus::Path<'static>,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerSettingsSyncSyncConnectionRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.connection, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerSettingsSyncSyncConnectionRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopNetworkManagerSettingsSyncSyncConnectionRemoved {
            connection: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerSettingsSyncSyncConnectionRemoved {
    const NAME: &'static str = "SyncSyncConnectionRemoved";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings";
}
