// This code was autogenerated with `dbus-codegen-rust -m None`, see https://github.com/diwic/dbus-rs
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopNetworkManagerSettingsSyncConnection {
    fn update(
        &self,
        properties: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> Result<(), dbus::Error>;
    fn update_unsaved(
        &self,
        properties: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> Result<(), dbus::Error>;
    fn delete(&self) -> Result<(), dbus::Error>;
    fn get_settings(
        &self,
    ) -> Result<
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
        dbus::Error,
    >;
    fn get_secrets(
        &self,
        setting_name: &str,
    ) -> Result<
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
        dbus::Error,
    >;
    fn clear_secrets(&self) -> Result<(), dbus::Error>;
    fn save(&self) -> Result<(), dbus::Error>;
    fn update2(
        &self,
        settings: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        flags: u32,
        args: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        dbus::Error,
    >;
    fn unsaved(&self) -> Result<bool, dbus::Error>;
    fn flags(&self) -> Result<u32, dbus::Error>;
    fn filename(&self) -> Result<String, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::SyncConnection>>
    OrgFreedesktopNetworkManagerSettingsSyncConnection for blocking::Proxy<'a, C>
{
    fn update(
        &self,
        properties: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "Update",
            (properties,),
        )
    }

    fn update_unsaved(
        &self,
        properties: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "UpdateUnsaved",
            (properties,),
        )
    }

    fn delete(&self) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "Delete",
            (),
        )
    }

    fn get_settings(
        &self,
    ) -> Result<
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
        dbus::Error,
    > {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "GetSettings",
            (),
        )
        .and_then(
            |r: (
                ::std::collections::HashMap<
                    String,
                    ::std::collections::HashMap<
                        String,
                        arg::Variant<Box<dyn arg::RefArg + 'static>>,
                    >,
                >,
            )| Ok(r.0),
        )
    }

    fn get_secrets(
        &self,
        setting_name: &str,
    ) -> Result<
        ::std::collections::HashMap<
            String,
            ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        >,
        dbus::Error,
    > {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "GetSecrets",
            (setting_name,),
        )
        .and_then(
            |r: (
                ::std::collections::HashMap<
                    String,
                    ::std::collections::HashMap<
                        String,
                        arg::Variant<Box<dyn arg::RefArg + 'static>>,
                    >,
                >,
            )| Ok(r.0),
        )
    }

    fn clear_secrets(&self) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "ClearSecrets",
            (),
        )
    }

    fn save(&self) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "Save",
            (),
        )
    }

    fn update2(
        &self,
        settings: ::std::collections::HashMap<
            &str,
            ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
        >,
        flags: u32,
        args: ::std::collections::HashMap<&str, arg::Variant<Box<dyn arg::RefArg>>>,
    ) -> Result<
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
        dbus::Error,
    > {
        self.method_call(
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "Update2",
            (settings, flags, args),
        )
        .and_then(
            |r: (
                ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
            )| Ok(r.0),
        )
    }

    fn unsaved(&self) -> Result<bool, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "Unsaved",
        )
    }

    fn flags(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "Flags",
        )
    }

    fn filename(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.Settings.SyncConnection",
            "Filename",
        )
    }
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerSettingsSyncConnectionUpdated {}

impl arg::AppendAll for OrgFreedesktopNetworkManagerSettingsSyncConnectionUpdated {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerSettingsSyncConnectionUpdated {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopNetworkManagerSettingsSyncConnectionUpdated {})
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerSettingsSyncConnectionUpdated {
    const NAME: &'static str = "Updated";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings.SyncConnection";
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerSettingsSyncConnectionRemoved {}

impl arg::AppendAll for OrgFreedesktopNetworkManagerSettingsSyncConnectionRemoved {
    fn append(&self, _: &mut arg::IterAppend) {}
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerSettingsSyncConnectionRemoved {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopNetworkManagerSettingsSyncConnectionRemoved {})
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopNetworkManagerSettingsSyncConnectionRemoved {
    const NAME: &'static str = "Removed";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings.SyncConnection";
}

#[derive(Debug)]
pub struct OrgFreedesktopNetworkManagerSettingsSyncConnectionPropertiesChanged {
    pub properties:
        ::std::collections::HashMap<String, arg::Variant<Box<dyn arg::RefArg + 'static>>>,
}

impl arg::AppendAll for OrgFreedesktopNetworkManagerSettingsSyncConnectionPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopNetworkManagerSettingsSyncConnectionPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(
            OrgFreedesktopNetworkManagerSettingsSyncConnectionPropertiesChanged {
                properties: i.read()?,
            },
        )
    }
}

impl dbus::message::SignalArgs
    for OrgFreedesktopNetworkManagerSettingsSyncConnectionPropertiesChanged
{
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.NetworkManager.Settings.SyncConnection";
}
