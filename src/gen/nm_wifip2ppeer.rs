// This code was autogenerated with `dbus-codegen-rust -m None`, see https://github.com/diwic/dbus-rs
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopNetworkManagerWifiP2PPeer {
    fn name(&self) -> Result<String, dbus::Error>;
    fn flags(&self) -> Result<u32, dbus::Error>;
    fn manufacturer(&self) -> Result<String, dbus::Error>;
    fn model(&self) -> Result<String, dbus::Error>;
    fn model_number(&self) -> Result<String, dbus::Error>;
    fn serial(&self) -> Result<String, dbus::Error>;
    fn wfd_ies(&self) -> Result<Vec<u8>, dbus::Error>;
    fn hw_address(&self) -> Result<String, dbus::Error>;
    fn strength(&self) -> Result<u8, dbus::Error>;
    fn last_seen(&self) -> Result<i32, dbus::Error>;
}

impl<'a, C: ::std::ops::Deref<Target = blocking::SyncSyncConnection>>
    OrgFreedesktopNetworkManagerWifiP2PPeer for blocking::Proxy<'a, C>
{
    fn name(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "Name",
        )
    }

    fn flags(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "Flags",
        )
    }

    fn manufacturer(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "Manufacturer",
        )
    }

    fn model(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "Model",
        )
    }

    fn model_number(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "ModelNumber",
        )
    }

    fn serial(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "Serial",
        )
    }

    fn wfd_ies(&self) -> Result<Vec<u8>, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "WfdIEs",
        )
    }

    fn hw_address(&self) -> Result<String, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "HwAddress",
        )
    }

    fn strength(&self) -> Result<u8, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "Strength",
        )
    }

    fn last_seen(&self) -> Result<i32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.NetworkManager.WifiP2PPeer",
            "LastSeen",
        )
    }
}
